/*
 * Generated by the Mule project wizard. http://mule.mulesoft.org
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package com.rplp.icc.authorization.authservice;

import static org.junit.Assert.assertEquals;

import java.io.FileInputStream;
import java.security.cert.X509Certificate;
import java.util.Properties;



import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;
import org.mule.tck.junit4.FunctionalTestCase;

import com.eviware.soapui.impl.wsdl.WsdlProject;
import com.meterware.httpunit.AuthorizationRequiredException;
import com.meterware.httpunit.GetMethodWebRequest;
import com.meterware.httpunit.HttpException;
import com.meterware.httpunit.WebConversation;
import com.meterware.httpunit.WebRequest;
import com.meterware.httpunit.WebResponse;
import com.rplp.icc.authorization.domain.Person;

public class AuthServiceTestCase  extends FunctionalTestCase {

	private static Properties properties;

	@Override
	protected String getConfigResources() {
		return "src/main/app/mule-config.xml";
	}
	
	

	@BeforeClass
	public static void initialize() throws Exception {
		
		//Mule needs to know where the configuration should be loaded from.
		System.setProperty("conf.dir", "conf");
		

		properties = new Properties();
		properties.load(new FileInputStream(
				"conf/authorization-app.properties"));
		
		turnOffCertificateVerification();
		
		startSoapUIMockService();
	}


	@Test
	public void testAuthenticated() throws Exception {

		WebConversation wc = new WebConversation();

		WebRequest request = new GetMethodWebRequest(properties.getProperty("authorization.service.inbound.address") + "/person/123");
		
		wc.setAuthentication("mule-realm", "testclient", "test");
	
		WebResponse response = wc.getResponse(request);

		System.out.println(response.getText());
		System.out.println(response.getResponseMessage());
		
		
		assertEquals(200, response.getResponseCode());
		
		ObjectMapper mapper = new ObjectMapper();
		Person person = mapper.readValue(response.getText(), Person.class);
		Assert.assertEquals(1, person.getOrganizations().size());
		
	}
	
	@Test(expected = AuthorizationRequiredException.class)
	public void testUnauthenticated() throws Exception {

		WebConversation wc = new WebConversation();
		

		WebRequest request = new GetMethodWebRequest(properties.getProperty("authorization.service.inbound.address") + "/person/123");
		
		

		wc.setAuthentication("mule-realm", "testclient", "wrongpassword");
	
		wc.getResponse(request);
		
		
	}
	
	@Test
	public void testUnauthorized() throws Exception {

		WebConversation wc = new WebConversation();
		

		WebRequest request = new GetMethodWebRequest(properties.getProperty("authorization.service.inbound.address") + "/person/123");
		
		

		wc.setAuthentication("mule-realm", "testclient2", "test");
	
		try {
			wc.getResponse(request);
			Assert.fail("should throw exception");
		} catch (HttpException e) {
			Assert.assertEquals(403, e.getResponseCode());
		}
		
		
	}


	private static void startSoapUIMockService() throws Exception {

		WsdlProject project = new WsdlProject(
				"src/test/resources/soapui/Rolle-soapui-project.xml");

		project.getMockServiceByName(
				"RolleServiceSoapBinding MockService").start();

	}

	private static void turnOffCertificateVerification() {
		
		//Don't verify host names
		com.sun.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier(new com.sun.net.ssl.HostnameVerifier() {
			@Override
			public boolean verify(String arg0, String arg1) {
				// TODO Auto-generated method stub
				return true;
			}
		});
		
		// Create a trust manager that does not validate certificate chains
		com.sun.net.ssl.TrustManager[] trustAllCerts = new com.sun.net.ssl.TrustManager[]{
		    new com.sun.net.ssl.X509TrustManager() {
		        @Override
		        public X509Certificate[] getAcceptedIssuers() {
		        	return null;
		        }
		        @Override
		        public boolean isClientTrusted(X509Certificate[] arg0) {
		        	return true;
		        }
		        
		        public boolean isServerTrusted(X509Certificate[] arg0) {
					return true;
		        };
		        
		}};
		
		// Install the all-trusting trust manager
		try {
		    com.sun.net.ssl.SSLContext sc = com.sun.net.ssl.SSLContext.getInstance("SSL");
		    sc.init(null, trustAllCerts, new java.security.SecureRandom());
		    com.sun.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

}
